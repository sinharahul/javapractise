package datastructures;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

public class MyArrayList<E> implements List<E> {
    private E[] data;
    private int capacity;
    private int currentPos =0;

    public MyArrayList(int size) {
        if(size < 0)throw new IllegalArgumentException("Size cannot be less than zero");
        this.capacity= size;
        this.data = (E[])new Object[size];
    }

    @Override
    public int size() {
        return currentPos;
    }

    @Override
    public boolean isEmpty() {
        return currentPos ==0;
    }

    @Override
    public boolean contains(Object o) {
        for(Object m:data){
            if(o.equals(m))return true;
        }
        return false;
    }

    @Override
    public Iterator<E> iterator() {
        return null;
    }

    @Override
    public Object[] toArray() {
        return new Object[0];
    }

    @Override
    public <T> T[] toArray(T[] a) {
        return null;
    }

    @Override
    public boolean add(E e) {
        ensureCapacity();
        data[currentPos++] = e;
        return true;
    }

    private void ensureCapacity() {
        if(currentPos+1 > capacity){
            System.out.println("Expanding capacity");
            E[] old = data;
            capacity <<= 2;
            data = (E[])new Object[capacity];
            System.arraycopy(old,0,data,0,old.length);

        }
    }

    @Override
    public boolean remove(Object o) {
        return false;
    }

    @Override
    public boolean containsAll(Collection<?> c) {
        return false;
    }

    @Override
    public boolean addAll(Collection<? extends E> c) {
        return false;
    }

    @Override
    public boolean addAll(int index, Collection<? extends E> c) {
        return false;
    }

    @Override
    public boolean removeAll(Collection<?> c) {
        return false;
    }

    @Override
    public boolean retainAll(Collection<?> c) {
        return false;
    }

    @Override
    public void clear() {
        currentPos = 0;
        data = (E[])new Object[capacity];
    }

    @Override
    public E get(int index) {
        return data[index];
    }

    @Override
    public E set(int index, E element) {
        if(index < 0 || index > capacity-1) return null;
        E old = data[index];
        data[index]=element;
        return old;
    }

    @Override
    public void add(int index, E element) {
        if(index < 0 || index > capacity-1) return;
        ensureCapacity();
        for(int i=currentPos+1;i>index;i--){
            data[i]=data[i-1];
        }
        data[index]=element;
    }

    @Override
    public E remove(int index) {
        return null;
    }

    @Override
    public int indexOf(Object o) {
        return 0;
    }

    @Override
    public int lastIndexOf(Object o) {
        return 0;
    }

    @Override
    public ListIterator<E> listIterator() {
        return null;
    }

    @Override
    public ListIterator<E> listIterator(int index) {
        return null;
    }

    @Override
    public List<E> subList(int fromIndex, int toIndex) {
        return null;
    }

}
